app.version=0.0.4

quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=.*\.json
quarkus.swagger-ui.always-include=true
#quarkus.http.cors=true
quarkus.http.port=8080

#################################
# Source to Image to openshift 

quarkus.openshift.route.expose=true
quarkus.openshift.env.configmaps=eda-demo-order-mg
quarkus.container-image.group=ibmcase
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.labels.app=eda-order-ms
quarkus.container-image.name=eda-order-ms

quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=dev-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.env.mapping.JAAS_CFG.from-secret=tls-user
quarkus.openshift.env.mapping.JAAS_CFG.with-key=sasl.jaas.config
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=dev-cluster-ca-cert
# TLS user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.from-secret=tls-user
quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.with-key=user.password
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=tls-user

# Define Kafka properties for all channels
# Starting with Quarkus 1.5, a map containing kafka.* is automatically provided.
%dev.kafka.topic.name=eda-demo-orders
#%dev.kafka.bootstrap.servers=localhost:9092
%prod.kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS}
%prod.kafka.security.protocol=PLAINTEXT
%prod.kafka.ssl.truststore.location=/deployments/certs/server/server.p12
%prod.kafka.ssl.keystruststoretore.type=PKCS12
%prod.kafka.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
#%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
#%prod.kafka.ssl.keystore.type=PKCS12
#%prod.kafka.ssl.keystore.password=${KAFKA_SSL_KEYSTORE_PASSWORD}

# common to profile
kafka.producer.timeout.sec=10
kafka.producer.acks=all
kafka.producer.clientID=eda-demo-prod-01
kafka.producer.idempotence=true
kafka.producer.retries=1



# REACTIVE messaging channel specifics
mp.messaging.outgoing.orders.connector=smallrye-kafka
mp.messaging.outgoing.orders.topic=${KAFKA_TOPIC_NAME}
mp.messaging.outgoing.orders.acks=1
mp.messaging.outgoing.orders.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
mp.messaging.outgoing.orders.max-inflight-messages=1
# can pass any kafka producer properties
# mp.messaging.outgoing.orders.batch.size=32768

# Schema registry
# automatically register the schema with the registry, if not present
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${ES_APICURIO_URL}
mp.messaging.outgoing.orders.apicurio.registry.auto-register=true
mp.messaging.outgoing.orders.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.orders.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
#mp.messaging.outgoing.orders.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider

%prod.mp.messaging.outgoing.orders.apicurio.registry.url=${ES_APICURIO_URL}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=SASL_SSL
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.sasl.jaas.config=${JAAS_CFG}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.sasl.mechanism=PLAIN
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.protocol=TLSv1.2
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.type=PKCS12
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
mp.messaging.outgoing.orders.cloud-events-type=OrderEvent
mp.messaging.outgoing.orders.cloud-events-source=https://github.com/jbcodeforce/eda-demo-order-ms
mp.messaging.outgoing.orders.cloud-events-subject=OrderManager

app.version=0.0.6

mp.openapi.extensions.smallrye.info.title=Order management service API
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Just an example of event-driven Order management service
mp.openapi.extensions.smallrye.info.termsOfService=Your terms here...
mp.openapi.extensions.smallrye.info.contact.email=agilebusinessruledevelopment@gmail.com
mp.openapi.extensions.smallrye.info.contact.name=IBM Automation - Solution Engineering
mp.openapi.extensions.smallrye.info.contact.url=http://https://ibm-cloud-architecture.github.io/refarch-eda/
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0
mp.openapi.extensions.smallrye.info.license.url=https://www.apache.org/licenses/LICENSE-2.0.html


quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.log.category."ibm.eda".level=${EDA_LOGGING_LEVEL:DEBUG}
quarkus.log.category."ibm.eda".min-level=DEBUG
quarkus.native.additional-build-args =-H:ResourceConfigurationFiles=.*\.json
quarkus.swagger-ui.always-include=true
#quarkus.http.cors=true
quarkus.http.port=8080

#################################
# Source to Image to openshift 

quarkus.openshift.route.expose=true
quarkus.openshift.env.configmaps=eda-demo-order-cm
quarkus.container-image.group=ibmcase
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.openshift.labels.app=eda-order-ms
quarkus.container-image.name=eda-order-ms

quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.from-secret=dev-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_SSL_TRUSTSTORE_PASSWORD.with-key=ca.password
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=dev-cluster-ca-cert
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=dev-cluster-ca-cert
# in case we want to use mTLS for authentication
#quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.from-secret=tls-user
#quarkus.openshift.env.mapping.KAFKA_SSL_KEYSTORE_PASSWORD.with-key=user.password
#quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
#quarkus.openshift.secret-volumes.user-cert.secret-name=tls-user

# Define Kafka properties for all channels
# Starting with Quarkus 1.5, a map containing kafka.* is automatically provided.
%dev.kafka.topic.name=orders
%dev.kafka.bootstrap.servers=localhost:9092
# in case we want to use mTLS for authentication
#%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
#%prod.kafka.ssl.keystore.type=PKCS12
#%prod.kafka.ssl.keystore.password=${KAFKA_SSL_KEYSTORE_PASSWORD}


# REACTIVE messaging channel specifics
mp.messaging.outgoing.orders.connector=smallrye-kafka
%dev.mp.messaging.outgoing.orders.topic=orders
%test.mp.messaging.outgoing.orders.topic=orders
mp.messaging.outgoing.orders.topic=${KAFKA_TOPIC_NAME}
mp.messaging.outgoing.orders.acks=1
mp.messaging.outgoing.orders.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
mp.messaging.outgoing.orders.max-inflight-messages=1
# can pass any kafka producer properties
# mp.messaging.outgoing.orders.batch.size=32768

# Schema registry
# automatically register the schema with the registry, if not present
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${ES_APICURIO_URL}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=PLAINTEXT

mp.messaging.outgoing.orders.apicurio.registry.auto-register=true
mp.messaging.outgoing.orders.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.orders.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
#mp.messaging.outgoing.orders.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
# for SASL_SSL authentication and encryption
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=SASL_SSL
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.sasl.jaas.config=${JAAS_CFG}
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.sasl.mechanism=PLAIN
# For TLS encryption
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.protocol=TLSv1.2
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.type=PKCS12
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
mp.messaging.outgoing.orders.cloud-events-type=OrderEvent
mp.messaging.outgoing.orders.cloud-events-source=https://github.com/jbcodeforce/eda-demo-order-ms
mp.messaging.outgoing.orders.cloud-events-subject=OrderManager
